// <auto-generated />
using System;
using HIN_Ventures.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HIN_Ventures.Migrations
{
    [DbContext(typeof(HIN_VenturesContext))]
    [Migration("20221212120904_SeedSubscriptionDescription")]
    partial class SeedSubscriptionDescription
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FreelancerSpeciality", b =>
                {
                    b.Property<string>("FreelancersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SpecialitiesSpecialityId")
                        .HasColumnType("int");

                    b.HasKey("FreelancersId", "SpecialitiesSpecialityId");

                    b.HasIndex("SpecialitiesSpecialityId");

                    b.ToTable("FreelancerSpeciality");

                    b.HasData(
                        new
                        {
                            FreelancersId = "c1441e48-9e22-47d6-a6de-981461285925",
                            SpecialitiesSpecialityId = 25
                        },
                        new
                        {
                            FreelancersId = "c1441e48-9e22-47d6-a6de-981461285925",
                            SpecialitiesSpecialityId = 1
                        },
                        new
                        {
                            FreelancersId = "c1441e48-9e22-47d6-a6de-981461285925",
                            SpecialitiesSpecialityId = 2
                        },
                        new
                        {
                            FreelancersId = "c1441e48-9e22-47d6-a6de-981461285925",
                            SpecialitiesSpecialityId = 3
                        },
                        new
                        {
                            FreelancersId = "c1441e48-9e22-47d6-a6de-981461285925",
                            SpecialitiesSpecialityId = 4
                        },
                        new
                        {
                            FreelancersId = "c1441e48-9e22-47d6-a6de-981461285925",
                            SpecialitiesSpecialityId = 5
                        },
                        new
                        {
                            FreelancersId = "c1441e48-9e22-47d6-a6de-981461285925",
                            SpecialitiesSpecialityId = 10
                        },
                        new
                        {
                            FreelancersId = "c1441e48-9e22-47d6-a6de-981461285925",
                            SpecialitiesSpecialityId = 11
                        },
                        new
                        {
                            FreelancersId = "86dc77f5-a7a5-4743-8a25-82b4c6d52525",
                            SpecialitiesSpecialityId = 14
                        },
                        new
                        {
                            FreelancersId = "86dc77f5-a7a5-4743-8a25-82b4c6d52525",
                            SpecialitiesSpecialityId = 15
                        },
                        new
                        {
                            FreelancersId = "86dc77f5-a7a5-4743-8a25-82b4c6d52525",
                            SpecialitiesSpecialityId = 18
                        },
                        new
                        {
                            FreelancersId = "86dc77f5-a7a5-4743-8a25-82b4c6d52525",
                            SpecialitiesSpecialityId = 20
                        },
                        new
                        {
                            FreelancersId = "86dc77f5-a7a5-4743-8a25-82b4c6d52525",
                            SpecialitiesSpecialityId = 21
                        },
                        new
                        {
                            FreelancersId = "86dc77f5-a7a5-4743-8a25-82b4c6d52525",
                            SpecialitiesSpecialityId = 26
                        },
                        new
                        {
                            FreelancersId = "163d57d7-8a53-46f0-8c37-90bc9fadddf6",
                            SpecialitiesSpecialityId = 28
                        },
                        new
                        {
                            FreelancersId = "163d57d7-8a53-46f0-8c37-90bc9fadddf6",
                            SpecialitiesSpecialityId = 27
                        },
                        new
                        {
                            FreelancersId = "163d57d7-8a53-46f0-8c37-90bc9fadddf6",
                            SpecialitiesSpecialityId = 25
                        },
                        new
                        {
                            FreelancersId = "163d57d7-8a53-46f0-8c37-90bc9fadddf6",
                            SpecialitiesSpecialityId = 23
                        },
                        new
                        {
                            FreelancersId = "163d57d7-8a53-46f0-8c37-90bc9fadddf6",
                            SpecialitiesSpecialityId = 22
                        },
                        new
                        {
                            FreelancersId = "163d57d7-8a53-46f0-8c37-90bc9fadddf6",
                            SpecialitiesSpecialityId = 20
                        },
                        new
                        {
                            FreelancersId = "a06696c0-0976-4e0c-8f06-550fba6b624e",
                            SpecialitiesSpecialityId = 20
                        },
                        new
                        {
                            FreelancersId = "a06696c0-0976-4e0c-8f06-550fba6b624e",
                            SpecialitiesSpecialityId = 12
                        },
                        new
                        {
                            FreelancersId = "a06696c0-0976-4e0c-8f06-550fba6b624e",
                            SpecialitiesSpecialityId = 22
                        },
                        new
                        {
                            FreelancersId = "a06696c0-0976-4e0c-8f06-550fba6b624e",
                            SpecialitiesSpecialityId = 25
                        },
                        new
                        {
                            FreelancersId = "a06696c0-0976-4e0c-8f06-550fba6b624e",
                            SpecialitiesSpecialityId = 28
                        },
                        new
                        {
                            FreelancersId = "a06696c0-0976-4e0c-8f06-550fba6b624e",
                            SpecialitiesSpecialityId = 9
                        },
                        new
                        {
                            FreelancersId = "a06696c0-0976-4e0c-8f06-550fba6b624e",
                            SpecialitiesSpecialityId = 6
                        },
                        new
                        {
                            FreelancersId = "a06696c0-0976-4e0c-8f06-550fba6b624e",
                            SpecialitiesSpecialityId = 4
                        },
                        new
                        {
                            FreelancersId = "a06696c0-0976-4e0c-8f06-550fba6b624e",
                            SpecialitiesSpecialityId = 5
                        },
                        new
                        {
                            FreelancersId = "a06696c0-0976-4e0c-8f06-550fba6b624e",
                            SpecialitiesSpecialityId = 3
                        },
                        new
                        {
                            FreelancersId = "a06696c0-0976-4e0c-8f06-550fba6b624e",
                            SpecialitiesSpecialityId = 2
                        },
                        new
                        {
                            FreelancersId = "a06696c0-0976-4e0c-8f06-550fba6b624e",
                            SpecialitiesSpecialityId = 1
                        },
                        new
                        {
                            FreelancersId = "a2d899fd-5b46-42f7-8a2d-3b042c159807",
                            SpecialitiesSpecialityId = 27
                        },
                        new
                        {
                            FreelancersId = "a2d899fd-5b46-42f7-8a2d-3b042c159807",
                            SpecialitiesSpecialityId = 24
                        },
                        new
                        {
                            FreelancersId = "a2d899fd-5b46-42f7-8a2d-3b042c159807",
                            SpecialitiesSpecialityId = 28
                        },
                        new
                        {
                            FreelancersId = "a2d899fd-5b46-42f7-8a2d-3b042c159807",
                            SpecialitiesSpecialityId = 26
                        },
                        new
                        {
                            FreelancersId = "a2d899fd-5b46-42f7-8a2d-3b042c159807",
                            SpecialitiesSpecialityId = 21
                        },
                        new
                        {
                            FreelancersId = "a2d899fd-5b46-42f7-8a2d-3b042c159807",
                            SpecialitiesSpecialityId = 14
                        },
                        new
                        {
                            FreelancersId = "a2d899fd-5b46-42f7-8a2d-3b042c159807",
                            SpecialitiesSpecialityId = 15
                        },
                        new
                        {
                            FreelancersId = "a2d899fd-5b46-42f7-8a2d-3b042c159807",
                            SpecialitiesSpecialityId = 13
                        },
                        new
                        {
                            FreelancersId = "a2d899fd-5b46-42f7-8a2d-3b042c159807",
                            SpecialitiesSpecialityId = 17
                        });
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.Assignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreelancerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("Progress")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssignmentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FreelancerId");

                    b.ToTable("Assignments");

                    b.HasData(
                        new
                        {
                            AssignmentId = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "En spennende oppdrag",
                            IsActive = true,
                            IsCompleted = false,
                            Progress = 0
                        },
                        new
                        {
                            AssignmentId = 2,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "En krevende oppdrag",
                            IsActive = true,
                            IsCompleted = false,
                            Progress = 0
                        });
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.FreelancerRating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreelancerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int");

                    b.HasKey("RatingId");

                    b.HasIndex("FreelancerId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MessageId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.Speciality", b =>
                {
                    b.Property<int>("SpecialityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialityId"), 1L, 1);

                    b.Property<string>("SpecialityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecialityId");

                    b.ToTable("Specialities");

                    b.HasData(
                        new
                        {
                            SpecialityId = 1,
                            SpecialityName = "Webapplikasjoner"
                        },
                        new
                        {
                            SpecialityId = 2,
                            SpecialityName = "C#"
                        },
                        new
                        {
                            SpecialityId = 3,
                            SpecialityName = "HTML"
                        },
                        new
                        {
                            SpecialityId = 4,
                            SpecialityName = "CSS"
                        },
                        new
                        {
                            SpecialityId = 5,
                            SpecialityName = "JavaScript"
                        },
                        new
                        {
                            SpecialityId = 6,
                            SpecialityName = "TypeScript"
                        },
                        new
                        {
                            SpecialityId = 7,
                            SpecialityName = "Java"
                        },
                        new
                        {
                            SpecialityId = 8,
                            SpecialityName = "C++"
                        },
                        new
                        {
                            SpecialityId = 9,
                            SpecialityName = "Azure"
                        },
                        new
                        {
                            SpecialityId = 10,
                            SpecialityName = "ASP.Net"
                        },
                        new
                        {
                            SpecialityId = 11,
                            SpecialityName = "MVC"
                        },
                        new
                        {
                            SpecialityId = 12,
                            SpecialityName = "Blazor"
                        },
                        new
                        {
                            SpecialityId = 13,
                            SpecialityName = "Python"
                        },
                        new
                        {
                            SpecialityId = 14,
                            SpecialityName = "Android"
                        },
                        new
                        {
                            SpecialityId = 15,
                            SpecialityName = "XML"
                        },
                        new
                        {
                            SpecialityId = 16,
                            SpecialityName = "Ruby"
                        },
                        new
                        {
                            SpecialityId = 17,
                            SpecialityName = "Matlab"
                        },
                        new
                        {
                            SpecialityId = 18,
                            SpecialityName = "Kotlin"
                        },
                        new
                        {
                            SpecialityId = 19,
                            SpecialityName = "C"
                        },
                        new
                        {
                            SpecialityId = 20,
                            SpecialityName = "SQL"
                        },
                        new
                        {
                            SpecialityId = 21,
                            SpecialityName = "RoomDatabase"
                        },
                        new
                        {
                            SpecialityId = 22,
                            SpecialityName = "Database"
                        },
                        new
                        {
                            SpecialityId = 23,
                            SpecialityName = "PHP"
                        },
                        new
                        {
                            SpecialityId = 24,
                            SpecialityName = "AI"
                        },
                        new
                        {
                            SpecialityId = 25,
                            SpecialityName = "Systemutvikling"
                        },
                        new
                        {
                            SpecialityId = 26,
                            SpecialityName = "Apputvikling"
                        },
                        new
                        {
                            SpecialityId = 27,
                            SpecialityName = "Systemarkitektur"
                        },
                        new
                        {
                            SpecialityId = 28,
                            SpecialityName = "Datasikkerhet"
                        });
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.SubmittedCode", b =>
                {
                    b.Property<int>("CodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodeId"), 1L, 1);

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateSubmitted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.HasKey("CodeId");

                    b.HasIndex("AssignmentId")
                        .IsUnique();

                    b.ToTable("SubmittedCodes");
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionId"), 1L, 1);

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NumberOfLines")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("SubscriptionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscriptionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Subscriptions");

                    b.HasData(
                        new
                        {
                            SubscriptionId = 1,
                            NumberOfLines = 10000,
                            Price = 10000.0,
                            SubscriptionDescription = "Minste pakke med opptil 10 000 linjer.",
                            SubscriptionName = "Liten pakke"
                        },
                        new
                        {
                            SubscriptionId = 2,
                            NumberOfLines = 50000,
                            Price = 45000.0,
                            SubscriptionDescription = "Medium pakke med opptil 50 000 linjer.",
                            SubscriptionName = "Medium pakke"
                        },
                        new
                        {
                            SubscriptionId = 3,
                            NumberOfLines = 100000,
                            Price = 90000.0,
                            SubscriptionDescription = "Største pakke tilgjengelig opptil 100 000 linjer. 10% billigere.",
                            SubscriptionName = "Stor pakke"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2e7a8add-af80-466b-878d-cdcbee2415ae",
                            ConcurrencyStamp = "e76e91da-a8a8-4396-995a-85b9b655b32e",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "d31e9f4e-4166-41bf-b226-67da21879725",
                            ConcurrencyStamp = "bb6efb1c-f4ff-4510-a3dc-64b60b51274b",
                            Name = "HINEmployee",
                            NormalizedName = "HINEMPLOYEE"
                        },
                        new
                        {
                            Id = "466b18cd-b94a-45cb-be05-aea6878443d8",
                            ConcurrencyStamp = "e1bb67b0-55c7-4daf-847d-a07d0ed49ebc",
                            Name = "SeniorDeveloper",
                            NormalizedName = "SENIORDEVELOPER"
                        },
                        new
                        {
                            Id = "75a7f84d-7a47-40a7-ba4c-d249ab5dfed4",
                            ConcurrencyStamp = "c2a50a0a-05cc-42c5-a205-3bee6abd18c7",
                            Name = "Freelancer",
                            NormalizedName = "FREELANCER"
                        },
                        new
                        {
                            Id = "3e52d2ba-8811-452a-be8e-0b2cc408c510",
                            ConcurrencyStamp = "13c9ed7a-377c-4950-a5b1-046a2a4f58a5",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e6fe3786-ba14-45b1-8bf7-f12d0ae1592c",
                            RoleId = "2e7a8add-af80-466b-878d-cdcbee2415ae"
                        },
                        new
                        {
                            UserId = "608f98cc-681c-42d0-8ee0-5d889584cb8a",
                            RoleId = "d31e9f4e-4166-41bf-b226-67da21879725"
                        },
                        new
                        {
                            UserId = "e3d0c038-508b-4c80-8fd7-7e56b0f74188",
                            RoleId = "466b18cd-b94a-45cb-be05-aea6878443d8"
                        },
                        new
                        {
                            UserId = "c1441e48-9e22-47d6-a6de-981461285925",
                            RoleId = "75a7f84d-7a47-40a7-ba4c-d249ab5dfed4"
                        },
                        new
                        {
                            UserId = "db001d8f-ee2f-4065-88ef-9732b8b5fc99",
                            RoleId = "3e52d2ba-8811-452a-be8e-0b2cc408c510"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "e6fe3786-ba14-45b1-8bf7-f12d0ae1592c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cbfaa80a-ea7a-445b-9884-d9e788d035b0",
                            Email = "admin@hinventures.no",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HINVENTURES.NO",
                            NormalizedUserName = "ADMIN@HINVENTURES.NO",
                            PasswordHash = "AQAAAAEAACcQAAAAEH49QtAwKNhjnMj+kxeJqouDjmbT3DSOBByZfPCRFPC6KBndiDCPf6D80RP1k07WwQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3a87faf4-92ea-44fa-9893-0c9b4986e724",
                            TwoFactorEnabled = false,
                            UserName = "admin@hinventures.no",
                            FirstName = "Admin",
                            LastName = "Bruker"
                        },
                        new
                        {
                            Id = "608f98cc-681c-42d0-8ee0-5d889584cb8a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "76dd5d82-78de-4f21-b5d0-d27d854fdac6",
                            Email = "employee@hinventures.no",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPLOYEE@HINVENTURES.NO",
                            NormalizedUserName = "EMPLOYEE@HINVENTURES.NO",
                            PasswordHash = "AQAAAAEAACcQAAAAEBr1gTDB3X2C4VgDpEZqiegdQDlNhy30l6ghFMYJ1hnrQRM54IHa3xJKJeBYTS+fSg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dec116cf-ad94-4a53-9428-12038b8e268b",
                            TwoFactorEnabled = false,
                            UserName = "employee@hinventures.no",
                            FirstName = "Ansatt",
                            LastName = "HINVentures"
                        },
                        new
                        {
                            Id = "e3d0c038-508b-4c80-8fd7-7e56b0f74188",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "67416619-4987-40a2-a556-a93b7cd56459",
                            Email = "senior@hinventures.no",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SENIOR@HINVENTURES.NO",
                            NormalizedUserName = "SENIOR@HINVENTURES.NO",
                            PasswordHash = "AQAAAAEAACcQAAAAEGanl6x1pYM8x52ojV10Onv8W/9krn/ZlOHoEBBpYO7avfmmh+cZZ0YSIIWoAm6EHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0eaaabbf-17f9-47c7-af00-5a2a17df2119",
                            TwoFactorEnabled = false,
                            UserName = "senior@hinventures.no",
                            FirstName = "Senior",
                            LastName = "Utvikler"
                        });
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.Customer", b =>
                {
                    b.HasBaseType("HIN_Ventures.Models.Entities.ApplicationUser");

                    b.Property<string>("AccountAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSubscriber")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Customer");

                    b.HasData(
                        new
                        {
                            Id = "db001d8f-ee2f-4065-88ef-9732b8b5fc99",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "31f89f4b-25fd-48a2-8a2f-8d5d3cf87ed5",
                            Email = "customer@customer.no",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER@CUSTOMER.NO",
                            NormalizedUserName = "CUSTOMER@CUSTOMER.NO",
                            PasswordHash = "AQAAAAEAACcQAAAAEMCcj1ZyvY6JYQFj0vHEQX4aIqpY5deMLAhANE1KaILylY1cHZUKBlqzH0Jf0ggPrw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dc60295a-a134-4c78-9c32-2cfb524c9304",
                            TwoFactorEnabled = false,
                            UserName = "customer@customer.no",
                            FirstName = "Klient",
                            LastName = "Bruker",
                            AccountAddress = "2N7eG8ZNiyem2rLUF2RVkqrTBhgV6rWmXAc",
                            IsSubscriber = true
                        });
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.Freelancer", b =>
                {
                    b.HasBaseType("HIN_Ventures.Models.Entities.ApplicationUser");

                    b.Property<string>("AccountAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Freelancer_AccountAddress");

                    b.HasDiscriminator().HasValue("Freelancer");

                    b.HasData(
                        new
                        {
                            Id = "c1441e48-9e22-47d6-a6de-981461285925",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "55098c18-cafd-47f6-acc5-ae33093ad1bc",
                            Email = "freelancer@freelancer.no",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FREELANCER@FREELANCER.NO",
                            NormalizedUserName = "FREELANCER@FREELANCER.NO",
                            PasswordHash = "AQAAAAEAACcQAAAAENu8yTohqAWpEj9XH1XXOnedLnikfd8eGehE7VifUuduSm/dvZRjlWvWARXXLIjUCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c8d8cbc7-7b78-4fa5-9da9-32f4e4948565",
                            TwoFactorEnabled = false,
                            UserName = "freelancer@freelancer.no",
                            FirstName = "Freelancer",
                            LastName = "Bruker",
                            AccountAddress = "2NFhZSZY2zpHCiAHGLbD9iVYfdZkg9yYkef"
                        },
                        new
                        {
                            Id = "86dc77f5-a7a5-4743-8a25-82b4c6d52525",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "54f3e952-b61a-42dd-a21e-83c2de181492",
                            Email = "j.johannessen@freelancer.no",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "J.JOHANNESSEN@FREELANCER.NO",
                            NormalizedUserName = "J.JOHANNESSEN@FREELANCER.NO",
                            PasswordHash = "AQAAAAEAACcQAAAAEL5ybTHp5xdP/PNGeoWEqiU44B7YkvYyoR7Ev0JSgIYH9xyxdg5SzkMiFkKwl+Vp+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c43011b9-bf90-42c1-a008-313118029d57",
                            TwoFactorEnabled = false,
                            UserName = "j.johannessen@freelancer.no",
                            FirstName = "Jon",
                            LastName = "Johannessen",
                            AccountAddress = "2N8vgPdZu5KDbfcVvL38K2ZLJ5XFu8soMgG"
                        },
                        new
                        {
                            Id = "163d57d7-8a53-46f0-8c37-90bc9fadddf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "16c25d59-b03e-47e7-9ae9-345211432b28",
                            Email = "karibj@freelancer.no",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KARIBJ@FREELANCER.NO",
                            NormalizedUserName = "KARIBJ@FREELANCER.NO",
                            PasswordHash = "AQAAAAEAACcQAAAAEFA25tsPyAicncTGoW1jxLBjrFvuA476IuqXdvccW28n5s3GvUxREzwAC3KFqB7nfA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "892f4044-eabe-4dbc-9840-74a42bf3fa8a",
                            TwoFactorEnabled = false,
                            UserName = "karibj@freelancer.no",
                            FirstName = "Kari",
                            LastName = "Bjørklund",
                            AccountAddress = "2MwEkhdf9hbh4RyqEqYARHZPZhJsT5w3Bpe"
                        },
                        new
                        {
                            Id = "a06696c0-0976-4e0c-8f06-550fba6b624e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bf531549-704f-40b4-819d-833d1221a620",
                            Email = "mjansen@freelancer.no",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MJANSEN@FREELANCER.NO",
                            NormalizedUserName = "MJANSEN@FREELANCER.NO",
                            PasswordHash = "AQAAAAEAACcQAAAAEANInNwmB62zBL5d3ONEwfvbnzCWE/oo1TsBR05ei6jXEAcG34ru3vnDaGbeq8gR7w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "76363374-de57-4907-9e36-677f7f5dc96f",
                            TwoFactorEnabled = false,
                            UserName = "mjansen@freelancer.no",
                            FirstName = "Mikael",
                            LastName = "Jansen",
                            AccountAddress = "2MsFT3bnroCrEm2wVDxcwZs3NNZuxGoVjA5"
                        },
                        new
                        {
                            Id = "a2d899fd-5b46-42f7-8a2d-3b042c159807",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36f0005f-ab24-400f-9f69-b1d1b33b4ab6",
                            Email = "ingeborgo@freelancer.no",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "INGEBORGO@FREELANCER.NO",
                            NormalizedUserName = "INGEBORGO@FREELANCER.NO",
                            PasswordHash = "AQAAAAEAACcQAAAAEHvJYeO9/e5DqGuKMjq1hnuOa6TjY0bgw6rEKe9sHzp/L7BDvrPW+jmJLPD2QbOszw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "782e4b48-e396-48b2-a1e8-d93d7ad988a3",
                            TwoFactorEnabled = false,
                            UserName = "ingeborgo@freelancer.no",
                            FirstName = "Ingeborg",
                            LastName = "Olsen",
                            AccountAddress = "2Mz5beBqoeFP2DSJt1fgxzPvnvDJAJtdAmB"
                        });
                });

            modelBuilder.Entity("FreelancerSpeciality", b =>
                {
                    b.HasOne("HIN_Ventures.Models.Entities.Freelancer", null)
                        .WithMany()
                        .HasForeignKey("FreelancersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HIN_Ventures.Models.Entities.Speciality", null)
                        .WithMany()
                        .HasForeignKey("SpecialitiesSpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.Assignment", b =>
                {
                    b.HasOne("HIN_Ventures.Models.Entities.Customer", null)
                        .WithMany("Assignments")
                        .HasForeignKey("CustomerId");

                    b.HasOne("HIN_Ventures.Models.Entities.Freelancer", null)
                        .WithMany("Assignments")
                        .HasForeignKey("FreelancerId");
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.FreelancerRating", b =>
                {
                    b.HasOne("HIN_Ventures.Models.Entities.Freelancer", null)
                        .WithMany("Ratings")
                        .HasForeignKey("FreelancerId");
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.Message", b =>
                {
                    b.HasOne("HIN_Ventures.Models.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.SubmittedCode", b =>
                {
                    b.HasOne("HIN_Ventures.Models.Entities.Assignment", "Assignment")
                        .WithOne("SubmittedCode")
                        .HasForeignKey("HIN_Ventures.Models.Entities.SubmittedCode", "AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.Subscription", b =>
                {
                    b.HasOne("HIN_Ventures.Models.Entities.Customer", null)
                        .WithMany("Subscriptions")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.Assignment", b =>
                {
                    b.Navigation("SubmittedCode")
                        .IsRequired();
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.Customer", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.Freelancer", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
