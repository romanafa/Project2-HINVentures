// <auto-generated />
using System;
using HIN_Ventures.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HIN_Ventures.Migrations
{
    [DbContext(typeof(HIN_VenturesContext))]
    [Migration("20221124165738_UserTypeSeedUpdate")]
    partial class UserTypeSeedUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FreelancerSpeciality", b =>
                {
                    b.Property<string>("FreelancersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SpecialitiesSpecialityId")
                        .HasColumnType("int");

                    b.HasKey("FreelancersId", "SpecialitiesSpecialityId");

                    b.HasIndex("SpecialitiesSpecialityId");

                    b.ToTable("FreelancerSpeciality");
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.Assignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreelancerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("Progress")
                        .HasColumnType("int");

                    b.HasKey("AssignmentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FreelancerId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.FreelancerRating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreelancerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int");

                    b.HasKey("RatingId");

                    b.HasIndex("FreelancerId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MessageId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.Speciality", b =>
                {
                    b.Property<int>("SpecialityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialityId"), 1L, 1);

                    b.Property<string>("SpecialityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecialityId");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.SubmittedCode", b =>
                {
                    b.Property<int>("CodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodeId"), 1L, 1);

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateSubmitted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.HasKey("CodeId");

                    b.HasIndex("AssignmentId")
                        .IsUnique();

                    b.ToTable("SubmittedCodes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2e7a8add-af80-466b-878d-cdcbee2415ae",
                            ConcurrencyStamp = "0f81462e-a845-4c29-ac70-bf0bb61375b3",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "d31e9f4e-4166-41bf-b226-67da21879725",
                            ConcurrencyStamp = "cc9b30fb-16a9-424f-8d92-3675110fb074",
                            Name = "HINEmployee",
                            NormalizedName = "HINEMPLOYEE"
                        },
                        new
                        {
                            Id = "466b18cd-b94a-45cb-be05-aea6878443d8",
                            ConcurrencyStamp = "622ae5e8-6ade-487b-ab9c-a42032c02e61",
                            Name = "SeniorDeveloper",
                            NormalizedName = "SENIORDEVELOPER"
                        },
                        new
                        {
                            Id = "75a7f84d-7a47-40a7-ba4c-d249ab5dfed4",
                            ConcurrencyStamp = "9b00d1c0-0c0a-4791-b0d2-795767cb7414",
                            Name = "Freelancer",
                            NormalizedName = "FREELANCER"
                        },
                        new
                        {
                            Id = "3e52d2ba-8811-452a-be8e-0b2cc408c510",
                            ConcurrencyStamp = "0a9cdd21-8efc-432b-9c9c-fac8718ea869",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e6fe3786-ba14-45b1-8bf7-f12d0ae1592c",
                            RoleId = "2e7a8add-af80-466b-878d-cdcbee2415ae"
                        },
                        new
                        {
                            UserId = "608f98cc-681c-42d0-8ee0-5d889584cb8a",
                            RoleId = "d31e9f4e-4166-41bf-b226-67da21879725"
                        },
                        new
                        {
                            UserId = "e3d0c038-508b-4c80-8fd7-7e56b0f74188",
                            RoleId = "466b18cd-b94a-45cb-be05-aea6878443d8"
                        },
                        new
                        {
                            UserId = "c1441e48-9e22-47d6-a6de-981461285925",
                            RoleId = "75a7f84d-7a47-40a7-ba4c-d249ab5dfed4"
                        },
                        new
                        {
                            UserId = "db001d8f-ee2f-4065-88ef-9732b8b5fc99",
                            RoleId = "3e52d2ba-8811-452a-be8e-0b2cc408c510"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "e6fe3786-ba14-45b1-8bf7-f12d0ae1592c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "197c770b-d7e6-4c9b-8a85-55235410a5be",
                            Email = "admin@hinventures.no",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HINVENTURES.NO",
                            NormalizedUserName = "ADMIN@HINVENTURES.NO",
                            PasswordHash = "AQAAAAEAACcQAAAAEK4OvAl4kAkOqNyEAGeS/GGHAVoLKEET935a3i8rLMt2CJOFTRFrLYTYs4AIfEg41Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "418d3699-091c-412e-9a0a-770c709ace71",
                            TwoFactorEnabled = false,
                            UserName = "admin@hinventures.no",
                            FirstName = "Admin",
                            LastName = "Bruker"
                        },
                        new
                        {
                            Id = "608f98cc-681c-42d0-8ee0-5d889584cb8a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07c849c7-acdd-4d24-b49d-feba01796b2d",
                            Email = "employee@hinventures.no",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPLOYEE@HINVENTURES.NO",
                            NormalizedUserName = "EMPLOYEE@HINVENTURES.NO",
                            PasswordHash = "AQAAAAEAACcQAAAAEFBrYtQ0sFmfMxkEVQLDY09x7JRIN4CSBY8W5W7lstdiSzk4w8UFOuQPg3YngL2Tew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c6966585-a8a5-4661-8394-0c21141eef15",
                            TwoFactorEnabled = false,
                            UserName = "employee@hinventures.no",
                            FirstName = "Ansatt",
                            LastName = "HINVentures"
                        },
                        new
                        {
                            Id = "e3d0c038-508b-4c80-8fd7-7e56b0f74188",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9dcc9cf7-7728-4828-b80e-6e0ca9d82475",
                            Email = "senior@hinventures.no",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SENIOR@HINVENTURES.NO",
                            NormalizedUserName = "SENIOR@HINVENTURES.NO",
                            PasswordHash = "AQAAAAEAACcQAAAAEHG9BMYs85LdUzdDYwtm1ME5w+NEHinHVzuJNr6xhZBKFVxmpoUfUfJjNtaxxHfcfg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc7a5e2e-772d-4a76-badc-1cd27692dd30",
                            TwoFactorEnabled = false,
                            UserName = "senior@hinventures.no",
                            FirstName = "Senior",
                            LastName = "Utvikler"
                        });
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.Customer", b =>
                {
                    b.HasBaseType("HIN_Ventures.Models.Entities.ApplicationUser");

                    b.Property<bool>("IsSubscriber")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Customer");

                    b.HasData(
                        new
                        {
                            Id = "db001d8f-ee2f-4065-88ef-9732b8b5fc99",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "797e1d76-cefc-424d-81ee-8e600681a903",
                            Email = "customer@customer.no",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER@CUSTOMER.NO",
                            NormalizedUserName = "CUSTOMER@CUSTOMER.NO",
                            PasswordHash = "AQAAAAEAACcQAAAAEITlU1ZgqtlRJ+6pI7J7hklfrojxLHEn6eUZiGQk3wUtzbKxVodJQwHHd3QFSLx8wA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cc3788fb-29fc-4f02-9efb-9b6a85774e49",
                            TwoFactorEnabled = false,
                            UserName = "customer@customer.no",
                            FirstName = "Klient",
                            LastName = "Bruker",
                            IsSubscriber = true
                        });
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.Freelancer", b =>
                {
                    b.HasBaseType("HIN_Ventures.Models.Entities.ApplicationUser");

                    b.HasDiscriminator().HasValue("Freelancer");

                    b.HasData(
                        new
                        {
                            Id = "c1441e48-9e22-47d6-a6de-981461285925",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f67b2982-161e-46d6-9f13-57dae00016f0",
                            Email = "freelancer@freelancer.no",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FREELANCER@FREELANCER.NO",
                            NormalizedUserName = "FREELANCER@FREELANCER.NO",
                            PasswordHash = "AQAAAAEAACcQAAAAEOLbaxyoQG4W5vrF0hYwquis7Hnrv30XM+ASotBXi71ePYxDfyz1yWLj7YTqldSWrQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "becaa50a-d814-4844-8391-590d1adfb157",
                            TwoFactorEnabled = false,
                            UserName = "freelancer@freelancer.no",
                            FirstName = "Freelancer",
                            LastName = "Bruker"
                        });
                });

            modelBuilder.Entity("FreelancerSpeciality", b =>
                {
                    b.HasOne("HIN_Ventures.Models.Entities.Freelancer", null)
                        .WithMany()
                        .HasForeignKey("FreelancersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HIN_Ventures.Models.Entities.Speciality", null)
                        .WithMany()
                        .HasForeignKey("SpecialitiesSpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.Assignment", b =>
                {
                    b.HasOne("HIN_Ventures.Models.Entities.Customer", null)
                        .WithMany("Assignments")
                        .HasForeignKey("CustomerId");

                    b.HasOne("HIN_Ventures.Models.Entities.Freelancer", null)
                        .WithMany("Assignments")
                        .HasForeignKey("FreelancerId");
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.FreelancerRating", b =>
                {
                    b.HasOne("HIN_Ventures.Models.Entities.Freelancer", null)
                        .WithMany("Ratings")
                        .HasForeignKey("FreelancerId");
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.Message", b =>
                {
                    b.HasOne("HIN_Ventures.Models.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.SubmittedCode", b =>
                {
                    b.HasOne("HIN_Ventures.Models.Entities.Assignment", "Assignment")
                        .WithOne("SubmittedCode")
                        .HasForeignKey("HIN_Ventures.Models.Entities.SubmittedCode", "AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.Assignment", b =>
                {
                    b.Navigation("SubmittedCode")
                        .IsRequired();
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.Customer", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("HIN_Ventures.Models.Entities.Freelancer", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
